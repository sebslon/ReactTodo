{"version":3,"sources":["components/Header/Header.module.scss","components/AddTask/AddTask.module.scss","components/IconButton/IconButton.module.scss","components/Task/Task.module.scss","components/TasksList/TasksList.module.scss","components/Header/Header.tsx","helpers/DatabaseManager.ts","stores/StoreProvider.tsx","hooks/useDatabase.ts","types/todoTasks.types.ts","actions/todoActions.ts","types/doneTasks.types.ts","components/AddTask/AddTask.tsx","components/IconButton/IconButton.tsx","images/clear-24px.svg","images/done-24px.svg","images/create-24px.svg","actions/doneActions.ts","types/utils.types.ts","helpers/timeFunctions.ts","components/Task/Task.tsx","components/TasksList/TasksList.tsx","components/Content/Content.tsx","reducers/rootReducer.ts","reducers/todoReducer.ts","reducers/doneReducer.ts","stores/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","style","bemCssModules","HeaderStyles","Header","className","to","DatabaseManagerEventName","DatabaseManager","databaseName","databaseStores","CREATE_OBJECT","DELETE_OBJECT","READ_OBJECT","READ_MODE","READ_WRITE_MODE","UPDATE_OBJECT","IndexedDB","window","indexedDB","database","errorHandler","objectName","operation","console","warn","this","initDB","close","storeName","databaseElement","transaction","objectStore","add","id","onerror","callback","getRequest","get","onsuccess","undefined","result","getAllRequest","getAll","delete","put","deleteDatabase","openRequest","open","onupgradeneeded","handleOnUpgradeNeeded","handleOnSuccessOpenRequest","dispatchEvent","CustomEvent","forEach","databaseStore","objectStoreNames","contains","createObjectStore","StoreContext","React","createContext","displayName","StoreProvider","children","Provider","value","useDatabase","databaseManager","useContext","Error","TodoActions","DoneActions","removeTodoTask","type","REMOVE_TASK","payload","AddTaskStyles","actualDate","Date","toISOString","slice","AddTask","dispatch","useDispatch","editState","useLocation","state","history","useHistory","useState","title","setTitle","description","setDescription","isDeadlineActive","setDeadlineActive","deadline","setDeadline","handleOnChangeText","e","target","buttonLabel","htmlFor","onChange","onClick","prev","toString","min","preventDefault","task","newTask","now","creationDate","getTime","editObject","EDIT_TASK","createObject","ADD_TASK","addTodoTask","push","pathname","IconButtonStyles","IconButton","props","background","icon","Months","getTimeInformation","unixTime","stringPrefix","date","day","getDate","month","getMonth","year","getUTCFullYear","hour","getUTCHours","minutes","getMinutes","getLeftTime","endTime","leftTime","hours","Math","floor","seconds","TaskStyles","Task","isTodoPath","useParams","time","setTime","useEffect","interval","setInterval","clearInterval","todoIcons","editTaskIcon","location","doneTaskIcon","changedTask","endDate","deleteObject","correctDateToDisplay","isDeadline","deleteTaskIcon","removeDoneTask","TasksListStyles","TasksList","tasks","useSelector","done","todo","map","Content","databaseLoader","getAllObjects","IMPORT_TASKS","importTodoTasks","importDoneTasks","addEventListener","log","component","path","from","rootReducer","combineReducers","action","filter","store","createStore","setSettings","modifierDelimiter","throwOnError","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c30e016f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header___wgTE\",\"header__title\":\"Header_header__title__kwVUi\",\"header__list\":\"Header_header__list__2dVUH\",\"header__element\":\"Header_header__element__2jXdN\",\"header__link\":\"Header_header__link__2R8ul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add-task\":\"AddTask_add-task__1Bvdr\",\"add-task__form\":\"AddTask_add-task__form__28BLY\",\"add-task__form-row\":\"AddTask_add-task__form-row__1Wv5f\",\"add-task__form-field\":\"AddTask_add-task__form-field__MLugX\",\"add-task__text-field\":\"AddTask_add-task__text-field__25b88\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon-button\":\"IconButton_icon-button__XxsSt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2_3oJ\",\"task__state-panel\":\"Task_task__state-panel__2ugdk\",\"task__title\":\"Task_task__title__z3ccx\",\"task__description\":\"Task_task__description__KJkHe\",\"task__creation-date\":\"Task_task__creation-date__1uVdy\",\"task__deadline\":\"Task_task__deadline__33Bi7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks-list\":\"TasksList_tasks-list__39pST\"};","import { Link } from 'react-router-dom';\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\nimport { default as HeaderStyles } from './Header.module.scss';\r\n\r\nconst style = bemCssModules(HeaderStyles);\r\n\r\nexport interface HeaderProps {\r\n  \r\n}\r\n \r\nconst Header: React.FC<HeaderProps> = () => {\r\n  return (\r\n    <nav className={style()}>\r\n      <h1 className={style('title')}>Get your things DONE !</h1>\r\n      <ul className={style('list')}>\r\n        <li className={style('element')}>\r\n          <Link className={style('link')} to='/todo'>Your tasks</Link>\r\n        </li>\r\n        <li className={style('element')}>\r\n          <Link className={style('link')} to='/done'>Done</Link>\r\n        </li>\r\n        <li className={style('element')}>\r\n          <Link className={style('link')} to='/addtask'>Add new task</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n \r\nexport default Header;","type GenericObjectID = number | string;\r\n\r\ninterface GenericObject {\r\n\tid: GenericObjectID;\r\n}\r\n\r\ntype Callback = (result: unknown[]) => unknown;\r\n\r\ntype EventName = 'database-manager-ready';\r\n\r\nexport const DatabaseManagerEventName: EventName = 'database-manager-ready';\r\n\r\nexport interface DatabaseManagerEventData extends CustomEvent {\r\n\ttype: EventName;\r\n}\r\n\r\nexport class DatabaseManager {\r\n\tprivate readonly CREATE_OBJECT = 'create';\r\n\tprivate readonly DELETE_OBJECT = 'delete';\r\n\tprivate readonly READ_OBJECT = 'read';\r\n\tprivate readonly READ_MODE = 'readonly';\r\n\tprivate readonly READ_WRITE_MODE = 'readwrite';\r\n\tprivate readonly UPDATE_OBJECT = 'update';\r\n\r\n\tprivate readonly IndexedDB = window.indexedDB;\r\n\r\n\tprivate database!: IDBDatabase;\r\n\r\n\tpublic constructor(private readonly databaseName: string, databaseStores?: string[]) {\r\n\t\tthis.initDB(databaseStores);\r\n\t}\r\n\r\n\tpublic closeDatabase(): void {\r\n\t\tthis.database.close();\r\n\t}\r\n\r\n\tpublic createObject<T extends GenericObject>(storeName: string, databaseElement: T): void {\r\n\t\tconst transaction = this.database.transaction(storeName, this.READ_WRITE_MODE);\r\n\t\tconst store = transaction.objectStore(storeName);\r\n\t\tconst createRequest = store.add(databaseElement, databaseElement.id);\r\n\r\n\t\tcreateRequest.onerror = () => this.errorHandler(storeName, this.CREATE_OBJECT);\r\n\t}\r\n\r\n\tpublic getObject(storeName: string, id: GenericObjectID, callback: Callback): void {\r\n\t\tconst transaction = this.database.transaction(storeName, this.READ_MODE);\r\n\t\tconst store = transaction.objectStore(storeName);\r\n\t\tconst getRequest = store.get(id);\r\n\r\n\t\tgetRequest.onerror = () => this.errorHandler(storeName, this.READ_OBJECT);\r\n\t\t\r\n\t\tgetRequest.onsuccess = () => {\r\n\t\t\tif (getRequest.result !== undefined) {\r\n\t\t\t\tcallback(getRequest.result);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tpublic getAllObjects<C extends Function>(storeName: string, callback: C): void {\r\n\t\tconst transaction = this.database.transaction(storeName, this.READ_MODE);\r\n\t\tconst store = transaction.objectStore(storeName);\r\n\t\tconst getAllRequest = store.getAll();\r\n\r\n\t\tgetAllRequest.onsuccess = () => callback(getAllRequest.result);\r\n\t\tgetAllRequest.onerror = () => this.errorHandler(storeName, this.READ_OBJECT);\r\n\t}\r\n\r\n\tpublic deleteObject(storeName: string, id: GenericObjectID): void {\r\n\t\tconst transaction = this.database.transaction(storeName, this.READ_WRITE_MODE);\r\n\t\tconst store = transaction.objectStore(storeName);\r\n\t\tconst addRequest = store.delete(id);\r\n\r\n\t\taddRequest.onerror = () => this.errorHandler(storeName, this.DELETE_OBJECT);\r\n\t}\r\n\r\n\tpublic editObject<T extends GenericObject>(storeName: string, databaseElement: T): void {\r\n\t\tconst transaction = this.database.transaction(storeName, this.READ_WRITE_MODE);\r\n\t\tconst store = transaction.objectStore(storeName);\r\n\t\tconst updateRequest = store.put(databaseElement, databaseElement.id);\r\n\r\n\t\tupdateRequest.onerror = () => this.errorHandler(this.databaseName, this.UPDATE_OBJECT);\r\n\t}\r\n\r\n\tpublic dangerousDropDatabase(): void {\r\n\t\tthis.database.close();\r\n\t\tconst deleteRequest = this.IndexedDB.deleteDatabase(this.databaseName);\r\n\r\n\t\tdeleteRequest.onerror = () => this.errorHandler(this.databaseName, this.DELETE_OBJECT);\r\n\t}\r\n\r\n\r\n\tprivate initDB(databaseStores?: string[]): void {\r\n\t\tconst openRequest = this.IndexedDB.open(this.databaseName);\r\n\r\n\t\topenRequest.onerror = () => console.warn(`Error loading ${this.databaseName} database!`);\r\n\r\n\t\topenRequest.onupgradeneeded = () => this.handleOnUpgradeNeeded(openRequest, databaseStores);\r\n\r\n\t\topenRequest.onsuccess = () => this.handleOnSuccessOpenRequest(openRequest);\r\n\t}\r\n\r\n\tprivate readonly errorHandler = (objectName: string, operation: string): void =>\r\n\t\tconsole.warn(`Error occured during operation: ${operation} for object/id ${objectName}`);\r\n\r\n\tprivate handleOnSuccessOpenRequest(openRequest: IDBOpenDBRequest): void {\r\n\t\tthis.database = openRequest.result;\r\n\t\twindow.dispatchEvent(new CustomEvent(DatabaseManagerEventName));\r\n\t}\r\n\r\n\tprivate handleOnUpgradeNeeded(openRequest: IDBOpenDBRequest, databaseStores?: string[]): void {\r\n\t\tthis.database = openRequest.result;\r\n\r\n\t\tif (!databaseStores) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdatabaseStores.forEach(databaseStore => {\r\n\t\t\tif (!this.database.objectStoreNames.contains(databaseStore)) {\r\n\t\t\t\tthis.database.createObjectStore(databaseStore);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}","import React from 'react';\r\nimport { DatabaseManager } from '../helpers/DatabaseManager';\r\n\r\nexport const StoreContext = React.createContext<DatabaseManager | null>(null);\r\n\r\nStoreContext.displayName = 'RootStore';\r\n\r\nexport const StoreProvider: React.FC = ({ children }) => {\r\n  return (\r\n    <StoreContext.Provider value={new DatabaseManager('task-database', ['todo', 'done'])}>\r\n      {children}\r\n    </StoreContext.Provider>\r\n  )\r\n}\r\n\r\n","import { useContext } from \"react\";\r\nimport { DatabaseManager } from \"../helpers/DatabaseManager\";\r\nimport { StoreContext } from \"../stores/StoreProvider\";\r\n\r\nexport function useDatabase(): DatabaseManager {\r\n  const databaseManager = useContext(StoreContext);\r\n\r\n  if(!databaseManager) {\r\n    throw new Error('Database manager not found.')\r\n  }\r\n\r\n  return databaseManager;\r\n}","export enum TodoActions {\r\n  ADD_TASK = \"ADD_TODO_TASK\",\r\n  EDIT_TASK = \"EDIT_TODO_TASK\",\r\n  REMOVE_TASK = \"REMOVE_TODO_TASK\",\r\n  IMPORT_TASKS = \"IMPORT_TODO_TASKS\",\r\n}\r\n\r\nexport interface TodoTask {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  creationDate: number;\r\n  deadline?: number;\r\n}\r\n\r\nexport interface AddTask {\r\n  type: TodoActions.ADD_TASK;\r\n  payload: TodoTask;\r\n}\r\n\r\nexport interface RemoveTask {\r\n  type: TodoActions.REMOVE_TASK;\r\n  payload: {\r\n    id: number;\r\n  };\r\n}\r\n\r\nexport interface EditTask {\r\n  type: TodoActions.EDIT_TASK;\r\n  payload: TodoTask;\r\n}\r\n\r\nexport interface ImportTasks {\r\n  type: TodoActions.IMPORT_TASKS;\r\n  payload: TodoTask[];\r\n}\r\n\r\nexport type TodoActionTypes = AddTask | RemoveTask | EditTask | ImportTasks;","import {TodoTask, TodoActions, TodoActionTypes} from '../types/todoTasks.types';\r\n\r\nexport const addTodoTask = (task: TodoTask): TodoActionTypes => ({\r\n  type: TodoActions.ADD_TASK,\r\n  payload: task,\r\n});\r\n\r\nexport const removeTodoTask = (id: number): TodoActionTypes => ({\r\n  type: TodoActions.REMOVE_TASK,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\nexport const editTodoTask = (task: TodoTask): TodoActionTypes => ({\r\n  type: TodoActions.EDIT_TASK,\r\n  payload: task,\r\n});\r\n\r\nexport const importTodoTasks = (tasks: TodoTask[]): TodoActionTypes => ({\r\n  type: TodoActions.IMPORT_TASKS,\r\n  payload: tasks,\r\n});\r\n","export enum DoneActions {\r\n  ADD_TASK = \"ADD_DONE_TASK\",\r\n  REMOVE_TASK = \"REMOVE_DONE_TASK\",\r\n  IMPORT_TASKS = \"IMPORT_DONE_TASKS\",\r\n}\r\n\r\nexport interface DoneTask {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  endDate: number;\r\n  deadline?: number;\r\n}\r\n\r\nexport interface AddDoneTask {\r\n  type: DoneActions.ADD_TASK;\r\n  payload: DoneTask;\r\n}\r\n\r\nexport interface RemoveDoneTask {\r\n  type: DoneActions.REMOVE_TASK;\r\n  payload: {\r\n    id: number;\r\n  };\r\n}\r\n\r\nexport interface ImportDoneTasks {\r\n  type: DoneActions.IMPORT_TASKS;\r\n  payload: DoneTask[];\r\n}\r\n\r\nexport type DoneActionTypes = AddDoneTask | RemoveDoneTask | ImportDoneTasks;","import { default as bemCssModules } from 'bem-css-modules';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nimport { default as AddTaskStyles } from './AddTask.module.scss';\r\nimport { TodoTask } from '../../types/todoTasks.types';\r\nimport { addTodoTask, editTodoTask } from '../../actions/todoActions';\r\nimport { useDatabase } from '../../hooks/useDatabase';\r\n\r\nconst style = bemCssModules(AddTaskStyles);\r\n\r\nconst EDIT_LABEL = 'Edit task';\r\nconst ADD_LABEL = 'Add task';\r\nconst actualDate = new Date().toISOString().slice(0, 10);\r\n\r\nconst AddTask: React.FC = () => {\r\n  const database = useDatabase();\r\n  const dispatch = useDispatch();\r\n  const editState = useLocation().state as Partial<TodoTask>\r\n  const history = useHistory();\r\n\r\n  const [title, setTitle] = useState<string>(editState?.title ?? '');\r\n  const [description, setDescription] = useState<string>(editState?.description ?? '');\r\n  const [isDeadlineActive, setDeadlineActive] = useState<boolean>(false);\r\n  const [deadline, setDeadline] = useState<string>(editState?.deadline\r\n    ? new Date(editState.deadline).toISOString().slice(0, 10)\r\n    : actualDate\r\n  );\r\n\r\n  const handleOnChangeText = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    e.target.id === 'title-task' ? setTitle(e.target.value) : setDescription(e.target.value);\r\n  }\r\n  const handleChangeDeadline = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.target.value) {\r\n      setDeadline(e.target.value);\r\n    }\r\n  }\r\n  const handleOnSubmit = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n\r\n    const location = {\r\n      pathname: '/todo',\r\n    }\r\n    const newTask: TodoTask = {\r\n      id: editState?.id ?? Date.now(),\r\n      title,\r\n      creationDate: editState?.id ?? Date.now(),\r\n      description,\r\n      deadline: isDeadlineActive ? new Date(deadline).getTime() : undefined,\r\n    };\r\n\r\n    if (editState?.id) {\r\n      database.editObject('todo', newTask);\r\n      dispatch(editTodoTask(newTask));\r\n    } else {\r\n      database.createObject('todo', newTask);\r\n      dispatch(addTodoTask(newTask));\r\n    }\r\n\r\n    history.push(location);\r\n  }\r\n  const toggleDeadline = (): void => {\r\n    setDeadlineActive(prev => !prev);\r\n  }\r\n\r\n  const buttonLabel = editState?.id ? EDIT_LABEL : ADD_LABEL;\r\n\r\n  return (\r\n    <div className={style()}>\r\n      <form className={style('form')}>\r\n        <div className={style('form-row')}>\r\n          <label htmlFor=\"title-task\">Task title</label>\r\n          <input className={style('form-field')} onChange={handleOnChangeText} value={title} id=\"title-task\" type=\"text\" />\r\n        </div>\r\n        <div className={style('form-row')}>\r\n          <label htmlFor=\"description-task\">Task description</label>\r\n          <textarea id=\"description-task\" className={style('text-field')} onChange={handleOnChangeText} value={description} />\r\n        </div>\r\n        <div className={style('form-row')}>\r\n          <label htmlFor=\"deadline-task\">Deadline</label>\r\n          <input onClick={toggleDeadline} id=\"deadline-task\" type=\"checkbox\" value={isDeadlineActive.toString()} />\r\n          {isDeadlineActive && <input onChange={handleChangeDeadline} type=\"date\" value={deadline} min={actualDate} />}\r\n        </div>\r\n        <button onClick={handleOnSubmit} type=\"submit\">\r\n          {buttonLabel}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTask;","import { default as bemCssModules } from 'bem-css-modules';\r\nimport { default as IconButtonStyles } from './IconButton.module.scss';\r\n\r\ninterface IconButtonProps {\r\n  onClick: () => void;\r\n  icon: string;\r\n}\r\n\r\nconst style = bemCssModules(IconButtonStyles);\r\n\r\nconst IconButton: React.FC<IconButtonProps> = (props) => {\r\n  return (\r\n    <button \r\n      className={style()}\r\n      onClick={props.onClick}\r\n      style={{background: `url(${props.icon})`}}\r\n      type=\"button\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default IconButton;","export default __webpack_public_path__ + \"static/media/clear-24px.53c9f4b6.svg\";","export default __webpack_public_path__ + \"static/media/done-24px.7a2471bd.svg\";","export default __webpack_public_path__ + \"static/media/create-24px.249fb4c7.svg\";","import {DoneTask, DoneActions, DoneActionTypes} from '../types/doneTasks.types';\r\n\r\nexport const addDoneTask = (task: DoneTask): DoneActionTypes => ({\r\n  type: DoneActions.ADD_TASK,\r\n  payload: task,\r\n});\r\n\r\nexport const removeDoneTask = (id: number): DoneActionTypes => ({\r\n  type: DoneActions.REMOVE_TASK,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\nexport const importDoneTasks = (tasks: DoneTask[]): DoneActionTypes => ({\r\n  type: DoneActions.IMPORT_TASKS,\r\n  payload: tasks,\r\n});\r\n","export enum Months {\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n}","import { Months } from '../types/utils.types'\r\n\r\nexport function getTimeInformation(unixTime: number, stringPrefix: string): string {\r\n  const date = new Date(unixTime);\r\n  const day = date.getDate();\r\n  const month = Months[date.getMonth()];\r\n  const year = date.getUTCFullYear();\r\n  const hour = date.getUTCHours() > 9 ? date.getUTCHours() : `0${date.getUTCHours()}`;\r\n  const minutes = date.getMinutes() > 9 ? date.getMinutes() : `0${date.getMinutes()}`\r\n\r\n  return `${stringPrefix} ${day} ${month} ${year} at : ${hour}:${minutes}`;\r\n}\r\n\r\nexport function getLeftTime(endTime: number): string {\r\n  const leftTime = endTime - Date.now();\r\n  const hours = Math.floor(leftTime / (1000 * 60 * 60));\r\n  const minutes = Math.floor((leftTime % (1000 * 60 * 60)) / (1000 * 60));\r\n  const seconds = Math.floor((leftTime % (1000 * 60)) / 1000);\r\n\r\n  if(hours < 0 || minutes < 0) {\r\n    return 'Today is your deadline!'\r\n  }\r\n  \r\n  return `Time left: ${hours > 9 ? hours : `0${hours}`}:${minutes > 0 ? minutes : `0${minutes}`}:${seconds > 0 ? seconds : 0+seconds}`;\r\n}","import { useHistory, useParams } from 'react-router';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDatabase } from '../../hooks/useDatabase';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\nimport IconButton from '../IconButton/IconButton';\r\nimport { default as TaskStyles } from './Task.module.scss';\r\n\r\nimport deleteTaskIcon from '../../images/clear-24px.svg';\r\nimport doneTaskIcon from '../../images/done-24px.svg';\r\nimport editTaskIcon from '../../images/create-24px.svg';\r\nimport { DoneTask } from '../../types/doneTasks.types';\r\nimport { TodoTask } from '../../types/todoTasks.types';\r\nimport { addDoneTask, removeDoneTask } from '../../actions/doneActions';\r\nimport { removeTodoTask } from '../../actions/todoActions';\r\nimport { getTimeInformation, getLeftTime} from '../../helpers/timeFunctions'\r\n\r\nconst style = bemCssModules(TaskStyles);\r\n\r\nconst Task: React.FC<TodoTask | DoneTask> = (props) => {\r\n  const database = useDatabase();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { id } = useParams<any>();\r\n  const isTodoPath = id !== 'done';\r\n\r\n  const [time, setTime] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTime(Date.now())\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, [time])\r\n  \r\n  const stringPrefix = isTodoPath ? 'Created' : 'Done';\r\n\r\n  const moveToDone = (): void => {\r\n    const changedTask: DoneTask = {\r\n      ...props,\r\n      endDate: Date.now(),\r\n    };\r\n\r\n    dispatch(addDoneTask(changedTask));\r\n    database.createObject('done', changedTask);\r\n    dispatch(removeTodoTask(props.id));\r\n    database.deleteObject('todo', props.id);\r\n  };\r\n\r\n  const deleteTask = (): void => {\r\n    if (isTodoPath) {\r\n      dispatch(removeTodoTask(props.id));\r\n      database.deleteObject('todo', props.id);\r\n    } else {\r\n      dispatch(removeDoneTask(props.id));\r\n      database.deleteObject('done', props.id);\r\n    }\r\n  };\r\n\r\n  const editTask = (): void => {\r\n    const location = {\r\n      pathname: '/addtask',\r\n      state: props,\r\n    };\r\n\r\n    history.push(location);\r\n  };\r\n\r\n  const todoIcons = isTodoPath ? (\r\n    <>\r\n      <IconButton icon={editTaskIcon} onClick={editTask} />\r\n      <IconButton icon={doneTaskIcon} onClick={moveToDone} />\r\n    </>\r\n  ) : null;\r\n\r\n  const correctDateToDisplay = isTodoPath\r\n    ? (<p className={style('creation-date')}>{getTimeInformation((props as TodoTask).creationDate, stringPrefix)}</p>)\r\n    : (<p className={style('creation-date')}>{getTimeInformation((props as DoneTask).endDate, stringPrefix)}</p>)\r\n\r\n  const isDeadline = props.deadline \r\n    ? (<p className={style('deadline')}>{getLeftTime(props.deadline)}</p>) \r\n    : null;\r\n\r\n  return (\r\n    <div className={style()}>\r\n      <div className={style('state-panel')}>\r\n        <h2 className={style('title')}>\r\n          {props.title}\r\n        </h2>\r\n        {todoIcons}\r\n        <IconButton icon={deleteTaskIcon} onClick={deleteTask} />\r\n      </div>\r\n      <p className={style('description')}>\r\n        {props.description}\r\n      </p>\r\n      {correctDateToDisplay}\r\n      {isDeadline}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;","import { default as bemCssModules } from 'bem-css-modules';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { DoneTask } from '../../types/doneTasks.types';\r\nimport { TodoTask } from '../../types/todoTasks.types';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport Task from '../Task/Task';\r\nimport { default as TasksListStyles } from './TasksList.module.scss';\r\n\r\nconst style = bemCssModules(TasksListStyles);\r\n\r\ntype Task = TodoTask | DoneTask;\r\n\r\nconst TasksList: React.FC = () => {\r\n  const { id } = useParams<any>();\r\n  const tasks = useSelector((state: RootState) => id === 'done' ? state.done : state.todo)\r\n\r\n  return (\r\n    <div className={style()}>\r\n      {(tasks as Task[]).map(task => (\r\n        <Task key={task.id} {...task} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default TasksList;","import { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useDatabase } from '../../hooks/useDatabase';\r\n\r\nimport AddTask from '../AddTask/AddTask';\r\nimport TasksList from '../TasksList/TasksList';\r\nimport { importTodoTasks } from '../../actions/todoActions';\r\nimport { importDoneTasks } from '../../actions/doneActions';\r\nimport { DatabaseManagerEventName } from '../../helpers/DatabaseManager';\r\nimport { TodoActionTypes, TodoTask } from '../../types/todoTasks.types';\r\nimport { DoneActionTypes, DoneTask } from '../../types/doneTasks.types';\r\n\r\n\r\nconst Content: React.FC = () => {\r\n  const database = useDatabase();\r\n  const dispatch = useDispatch();\r\n\r\n  const databaseLoader = (): void => {\r\n    database.getAllObjects<(result: TodoTask[]) => TodoActionTypes>('todo', tasks => dispatch(importTodoTasks(tasks)))\r\n    database.getAllObjects<(result: DoneTask[]) => DoneActionTypes>('done', tasks => dispatch(importDoneTasks(tasks)))\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(DatabaseManagerEventName, () => databaseLoader());\r\n    console.log('aa');\r\n  }, [database]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route component={AddTask} path=\"/addtask\" />\r\n      <Route component={TasksList} path=\"/:id\" />\r\n      <Route component={TasksList} path=\"/\" />\r\n      <Redirect from=\"*\" to=\"/todo\" />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Content;","import { combineReducers } from \"redux\";\r\nimport { todoReducer } from './todoReducer'\r\nimport { doneReducer } from './doneReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  todo: todoReducer,\r\n  done: doneReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import { TodoTask, TodoActionTypes, TodoActions } from '../types/todoTasks.types';\r\n\r\nexport const todoReducer = (state = [] as TodoTask[], action: TodoActionTypes): TodoTask[] => {\r\n  switch (action.type) {\r\n    case TodoActions.ADD_TASK:\r\n      return [...state, action.payload];\r\n\r\n    case TodoActions.REMOVE_TASK: {\r\n      return state.filter(task => task.id !== action.payload.id)\r\n    }\r\n\r\n    case TodoActions.EDIT_TASK: {\r\n      return state.map(task => task.id === action.payload.id ? action.payload : task)\r\n    }\r\n\r\n    case TodoActions.IMPORT_TASKS: {\r\n      return action.payload;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { DoneTask, DoneActionTypes, DoneActions } from '../types/doneTasks.types';\r\n\r\nexport const doneReducer = (state = [] as DoneTask[], action: DoneActionTypes): DoneTask[] => {\r\n  switch (action.type) {\r\n    case DoneActions.ADD_TASK:\r\n      return [...state, action.payload];\r\n\r\n    case DoneActions.REMOVE_TASK: {\r\n      return state.filter(task => task.id !== action.payload.id)\r\n    }\r\n\r\n    case DoneActions.IMPORT_TASKS: {\r\n      return action.payload;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore } from \"redux\";\r\nimport { rootReducer } from \"../reducers/rootReducer\";\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n","import './App.css';\nimport { HashRouter } from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport Content from './components/Content/Content';\n\nimport { default as bemCssModules } from 'bem-css-modules';\nimport { Provider } from 'react-redux';\nimport { store } from './stores/store';\nimport { StoreProvider } from './stores/StoreProvider';\n\nbemCssModules.setSettings({\n  modifierDelimiter: '--',\n  throwOnError: true,\n})\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <StoreProvider>\n        <div className=\"App\">\n          <HashRouter>\n            <Header />\n            <Content />\n          </HashRouter>\n        </div>\n      </StoreProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}